// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go
//
// Generated by this command:
//
//	mockgen -source=interface.go -destination=mock_interface.go -package=service
//

// Package service is a generated GoMock package.
package service

import (
	entities "gofrProject/entities"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	gofr "gofr.dev/pkg/gofr"
)

// MockUserStore is a mock of UserStore interface.
type MockUserStore struct {
	ctrl     *gomock.Controller
	recorder *MockUserStoreMockRecorder
	isgomock struct{}
}

// MockUserStoreMockRecorder is the mock recorder for MockUserStore.
type MockUserStoreMockRecorder struct {
	mock *MockUserStore
}

// NewMockUserStore creates a new mock instance.
func NewMockUserStore(ctrl *gomock.Controller) *MockUserStore {
	mock := &MockUserStore{ctrl: ctrl}
	mock.recorder = &MockUserStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserStore) EXPECT() *MockUserStoreMockRecorder {
	return m.recorder
}

// AddUsers mocks base method.
func (m *MockUserStore) AddUsers(user *entities.Users, ctx *gofr.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUsers", user, ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddUsers indicates an expected call of AddUsers.
func (mr *MockUserStoreMockRecorder) AddUsers(user, ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUsers", reflect.TypeOf((*MockUserStore)(nil).AddUsers), user, ctx)
}

// DeleteUsers mocks base method.
func (m *MockUserStore) DeleteUsers(name string, ctx *gofr.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUsers", name, ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUsers indicates an expected call of DeleteUsers.
func (mr *MockUserStoreMockRecorder) DeleteUsers(name, ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUsers", reflect.TypeOf((*MockUserStore)(nil).DeleteUsers), name, ctx)
}

// GetUsers mocks base method.
func (m *MockUserStore) GetUsers(ctx *gofr.Context) ([]entities.Users, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsers", ctx)
	ret0, _ := ret[0].([]entities.Users)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsers indicates an expected call of GetUsers.
func (mr *MockUserStoreMockRecorder) GetUsers(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsers", reflect.TypeOf((*MockUserStore)(nil).GetUsers), ctx)
}

// GetUsersByName mocks base method.
func (m *MockUserStore) GetUsersByName(name string, ctx *gofr.Context) (entities.Users, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsersByName", name, ctx)
	ret0, _ := ret[0].(entities.Users)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsersByName indicates an expected call of GetUsersByName.
func (mr *MockUserStoreMockRecorder) GetUsersByName(name, ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsersByName", reflect.TypeOf((*MockUserStore)(nil).GetUsersByName), name, ctx)
}

// UpdateUsers mocks base method.
func (m *MockUserStore) UpdateUsers(name string, updateUser *entities.Users, ctx *gofr.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUsers", name, updateUser, ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUsers indicates an expected call of UpdateUsers.
func (mr *MockUserStoreMockRecorder) UpdateUsers(name, updateUser, ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUsers", reflect.TypeOf((*MockUserStore)(nil).UpdateUsers), name, updateUser, ctx)
}
